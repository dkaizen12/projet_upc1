import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import '../model_data/user.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üîê Connexion par email et mot de passe
  Future<UserModel?> signInWithEmailPassword(String email, String password) async {
    try {
      final credential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      final uid = credential.user!.uid;
      final doc = await _firestore.collection('users').doc(uid).get();
      return UserModel.fromMap(doc.data()!);
    } catch (e) {
      print('Erreur de connexion : $e');
      return null;
    }
  }

  /// üìù Inscription par email avec cr√©ation automatique dans Firestore
  Future<UserModel?> registerWithEmailPassword({
    required String nom,
    required String email,
    required String password,
  }) async {
    try {
      final credential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      final uid = credential.user!.uid;
      final newUser = UserModel(
        nom: nom,
        email: email,
        password: password,
        likes: 0,
        abonnes: 0,
        abonnements: 0,
        photoUrl: null,
        posts: [],
      );
      await _firestore.collection('users').doc(uid).set(newUser.toMap());
      return newUser;
    } catch (e) {
      print('Erreur d\'inscription : $e');
      return null;
    }
  }

  /// üîê Connexion Google
  Future<UserModel?> signInWithGoogle() async {
    try {
      final GoogleSignIn googleSignIn = GoogleSignIn();
      final GoogleSignInAccount? account = await googleSignIn.signIn();
      if (account == null) return null;

      final GoogleSignInAuthentication googleAuth = await account.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final userCredential = await _auth.signInWithCredential(credential);
      final user = userCredential.user;
      if (user == null) return null;

      final docRef = _firestore.collection('users').doc(user.uid);
      final doc = await docRef.get();

      if (!doc.exists) {
        final newUser = UserModel(
          nom: user.displayName ?? 'Utilisateur',
          email: user.email ?? '',
          password: '',
          likes: 0,
          abonnes: 0,
          abonnements: 0,
          photoUrl: user.photoURL,
          posts: [],
        );
        await docRef.set(newUser.toMap());
        return newUser;
      } else {
        return UserModel.fromMap(doc.data()!);
      }
    } catch (e) {
      print('Erreur Google sign-in : $e');
      return null;
    }
  }

  /// üîí D√©connexion
  Future<void> signOut() async {
    await _auth.signOut();
    await GoogleSignIn().signOut();
  }

  /// üîë Mot de passe oubli√©
  Future<void> resetPassword(String email) async {
    await _auth.sendPasswordResetEmail(email: email);
  }
}


Voici comment int√©grer **Firebase Auth (email/mot de passe + Google)** dans tes interfaces personnalis√©es d‚Äôinscription et de connexion, en gardant tes √©crans UI existants (`Registre_page` et `login_vieuw`).

---

### ‚úÖ 1. üì¶ D√©pendances dans `pubspec.yaml`

Assure-toi d‚Äôavoir les bons packages :

```yaml
dependencies:
  firebase_core: ^2.0.0
  firebase_auth: ^4.0.0
  google_sign_in: ^6.0.0
  cloud_firestore: ^4.0.0
  flutter:
    sdk: flutter
```

---

### ‚úÖ 2. üî• Initialiser Firebase

Dans `main.dart` :

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(); // ‚ö†Ô∏è N√©cessite google-services.json
  runApp(const MyApp());
}
```

---

### ‚úÖ 3. üîê Cr√©er un fichier `auth_service.dart`

```dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import '../model_data/user.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // üîπ Inscription email
  Future<UserCredential?> registerWithEmail({
    required String nom,
    required String email,
    required String password,
  }) async {
    try {
      final credential = await _auth.createUserWithEmailAndPassword(email: email, password: password);

      final userModel = UserModel(
        nom: nom,
        email: email,
        password: password,
        likes: 0,
        abonnes: 0,
        abonnements: 0,
        photoUrl: null,
        posts: [],
      );

      await _firestore.collection('users').doc(credential.user!.uid).set(userModel.toMap());

      return credential;
    } catch (e) {
      print("Erreur inscription: $e");
      return null;
    }
  }

  // üîπ Connexion email
  Future<UserCredential?> loginWithEmail(String email, String password) async {
    try {
      return await _auth.signInWithEmailAndPassword(email: email, password: password);
    } catch (e) {
      print("Erreur connexion: $e");
      return null;
    }
  }

  // üîπ Connexion Google
  Future<UserCredential?> signInWithGoogle() async {
    try {
      final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();
      final GoogleSignInAuthentication googleAuth = await googleUser!.authentication;

      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final result = await _auth.signInWithCredential(credential);

      // V√©rifie si l'utilisateur existe d√©j√†
      final userDoc = await _firestore.collection('users').doc(result.user!.uid).get();
      if (!userDoc.exists) {
        final newUser = UserModel(
          nom: result.user!.displayName ?? 'Utilisateur Google',
          email: result.user!.email!,
          password: '',
          likes: 0,
          abonnes: 0,
          abonnements: 0,
          photoUrl: result.user!.photoURL,
          posts: [],
        );
        await _firestore.collection('users').doc(result.user!.uid).set(newUser.toMap());
      }

      return result;
    } catch (e) {
      print("Erreur Google login: $e");
      return null;
    }
  }

  Future<void> logout() async {
    await _auth.signOut();
  }
}
```

---

### ‚úÖ 4. üîå Int√©gration dans `Registre_page`

Dans le bouton `Confirmer` :

```dart
final nom = _nomController.text.trim();
final email = _emailController.text.trim();
final password = _passwordController.text;

final auth = AuthService();
final result = await auth.registerWithEmail(nom: nom, email: email, password: password);

if (result != null) {
  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(content: Text('Bienvenue $nom !')),
  );
  Navigator.pushNamed(context, Routes.home);
} else {
  ScaffoldMessenger.of(context).showSnackBar(
    const SnackBar(content: Text("Erreur d'inscription")));
}
```

Et pour le bouton Google :

```dart
final result = await AuthService().signInWithGoogle();
if (result != null) {
  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(content: Text("Bienvenue ${result.user!.displayName} !")),
  );
  Navigator.pushNamed(context, Routes.home);
}
```

---

### ‚úÖ 5. üîå Int√©gration dans `login_vieuw`

Dans `ElevatedButton` ‚ÄúSe connecter‚Äù :

```dart
final email = _emailController.text.trim();
final password = _passwordController.text;

final result = await AuthService().loginWithEmail(email, password);
if (result != null) {
  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(content: Text("Bienvenue ${result.user!.email}!")),
  );
  Navigator.pushNamed(context, Routes.home);
} else {
  ScaffoldMessenger.of(context).showSnackBar(
    const SnackBar(content: Text("Email ou mot de passe incorrect.")),
  );
}
```

---

### üìå √âtapes suivantes :

* Veux-tu que je t‚Äôaide √† :

  * üîÑ Synchroniser Firestore dans `ProfilWidget` pour afficher les vrais utilisateurs ?
  * üîë G√©rer la session utilisateur (`FirebaseAuth.instance.currentUser`) ?
  * ‚úÖ Ajouter la v√©rification ‚Äúmot de passe oubli√©‚Äù si besoin ?
